<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA Task//EN" "task.dtd">
<task id="cp_install_customizer_lite" xml:lang="en-us">
<title>Установка Customizer Lite</title>
<titlealts>
<searchtitle>Установка Customizer Lite - Администрирование -<ph conref="../../common/define.dita#define/connections-brand-short"></ph>-Конфигурирование соединений HCL для
Customizer Lite</searchtitle>
</titlealts>
<shortdesc>В этом разделе описано, как установить Customizer Lite.  Существует два варианта развертывания,\ nименуемые Customizer Lite и Customizer Lite HA.  Настройщик Lite – наиболее простое\ nразвертывание с использованием одного Docker-узла, работающего с одним экземпляром каждой требуемой службы, и\ nНастройщик Lite HA – более гибкое развертывание с использованием пары (или более) Docker-узлов, все из которых выполняют\ nэкземпляры каждой требуемой службы с запросами нагрузки, сбалансированной по доступным узлам.</shortdesc>
<taskbody>
<prereq>
<p>Системные требования для проверки и предварительные условия, которые необходимо соблюдать перед установкой Customizer Lite:<ul>
<li>Системные требования</li>
<li>Docker</li>
<li>Docker Compose</li>
<li>Настройка обратного прокси-сервера</li>
</ul></p>
<p><b>Системные требования</b></p>
<p>Для Customizer Lite (с одним экземпляром Docker) - одна виртуальная машина (4 CPU, 2.x GHZ,
8GB памяти и не менее 100GB диска) с операционной системой x86_64 Linux. Используйте две (или более) из этих виртуальных\ nмашин для настройки развертывания Customizer Lite HA.</p>
<p>Настройка Lite была проверена для работы на RHEL 7.6/CentOS 7.6 с использованием: Docker 17.03.x настроен
с хранилищем devicemapper Docker-Compose версии 1.22 .</p>
<p><b>Docker</b></p>
<p>Выполните шаги с 1 по 3 в следующей теме:<xref format="dita" href="cp_prereq_kubernetes_ha.dita"></xref>установить одну и ту же Docker-конфигурацию на каждую из виртуальных машин.</p>
<p><b>Docker Compose</b></p>
<p>Следующая система установит последнюю стабильную версию на RHEL 7.6/CentOS 7.6. (Для сценария Customizer\ ndocker-compose требуется минимальная версия 1.22). Повторите на каждой виртуальной машине, чтобы\ nвсе они имели одинаковую конфигурацию docker-compose.<ul>
<li>Дополнительные пакеты<p>
<codeblock>sudo yum install epel-release</codeblock>
</p></li>
<li>Установите python pip:<p>
<codeblock>sudo yum install python-pip</codeblock>
</p></li>
<li>Установить docker-compose<p>
<codeblock>sudo pip install docker-compose</codeblock>
</p></li>
<li>Обновление пакетов python на Cent0s для docker-compose<p>
<codeblock>sudo yum upgrade python*</codeblock>
</p></li>
<li>Протестировать установку docker-compose на каждой из виртуальных машин<p>
<codeblock>docker-compose version</codeblock>
</p></li>
</ul></p>
<p><b>Настройка обратного прокси-сервера</b></p>
<p>Customizer Lite требует использования обратного прокси-сервера. Ниже приведен пример использования NGINX
.</p>
<p>Обратитесь к шагам с 4 по 10 в следующей теме:<xref format="dita" href="cp_config_customizer_setup_nginx.dita"></xref>.</p>
</prereq>
<context>
<p>Следующие шаги содержат инструкции по установке Customizer Lite и\ nизменения конфигурации, необходимые для подключения, чтобы включить настройщик.</p>
<p>При развертывании Customizer Lite файлы могут быть установлены на локальное хранилище одной
виртуальной машины.</p>
<p>При развертывании Customizer Lite HA с несколькими Docker-узлами разместите файлы на общем томе
(например, NFS для Linux или SMB для Windows), чтобы все Docker-узлы могли монтировать и совместно использовать одни и те же
образы Docker-узла и файлы конфигурации службы. Перед внесением изменений, описанных ниже, установите общий том в файловую систему каждой\ nвиртуальной машины. Шаги 1-7 ниже должны выполняться\ n только один раз, если каталоги совместно используются и правильно монтируются на каждом Docker-узле; шаг 8
повторяется на всех узлах для запуска служб.</p>
</context>
<steps>
<step>
<cmd>Скопируйте архив Customizer Lite на требуемый объем хранилища (локальный или общий).</cmd>
</step>
<step>
<cmd>Извлеките архив в хранилище, например, в каталог с именем<filepath><varname>customizerLite</varname></filepath>. Должны быть четыре подкаталога, как показано
ниже:</cmd>
<info>
<p><image alt="Customizer Light archive" href="cp_customizer_lite_1.png" placement="inline"></image></p>
</info>
<info>
<ul>
<li>customifications: это место, где размещаются файлы настроек. Он будет содержать три файла
изначально. Они требуются настройщиком и не должны удаляться или перемещаться.</li>
<li>data: здесь сохраняются настройки приложений</li>
<li>изображения: каталог для трех изображений Customizer</li>
<li>скрипты: скрипты для развертывания, запуска и обновления Настройщика</li>
</ul>
</info>
</step>
<step>
<cmd>Установите разрешения на чтение на<filepath><varname>customizerLite</varname></filepath>каталог<filepath>chmod -R 700 Compose</filepath>.</cmd>
<info> </info>
</step>
<step>
<cmd>В<filepath><varname>customizerLite</varname></filepath>каталог, измените разрешения\ nиз следующих каталогов.</cmd>
<info>
<ul>
<li>настройки chmod -R 005</li>
<li>данные chmod -R 005</li>
<li>chmod -R 007 данные/настройки</li>
</ul>
</info>
</step>
<step>
<cmd>В каталоге scripts запустите скрипт "setupImages.sh". Это загрузит все три изображения
Настройщика. Чтобы запустить скрипт:</cmd>
<info>
<p>
<codeblock>./setupImages.sh -dr Docker_registry -u Your_user_name -p Your_password -st cs_lite</codeblock>
</p> Where:<ul>
<li>Docker_registry - это ваш реестр Docker (включите порт, если применимо)</li>
<li>Ваш_пользователь_name является вашим именем пользователя Docker (укажите фиктивное значение, если не требуется)</li>
<li>Ваш_пароль является вашим Docker-паролем (укажите фиктивное значение, если не используется)</li>
<li>параметр cs_lite .Это не изменится. Должно быть cs_lite.</li>
</ul>
</info>
</step>
<step>
<cmd>Run (Выполнить)<varname>docker images</varname>и запишите полное имя репозитория для каждого из<varname>mw-proxy</varname>, <varname>appregistry-service</varname>и<varname>appregistry-client</varname>. Отредактируйте файл scripts/.env.</cmd>
<info>
<p>Установите три переменные окружающей среды по мере необходимости (не указывайте http):<ul>
<li>CONNECTIONS_URL= my_installation_of_connections.com</li>
<li>NGINX_URL=my_installation_of_nginx.com</li>
</ul></p>
<p>В каждом из следующих разделов замените значения_IMAGE соответствующим репозиторием\ nимя, например:<ul>
<li>MW_PROXY_IMAGE=myDockerRegistry:5000/connections/mw-proxy</li>
<li>APPREGISTRY_SERVICE_IMAGE=myDockerRegistry:5000/connections/appregistry-service</li>
<li>APPREGISTRY_CLIENT_IMAGE=myDockerRegistry:5000/connections/appregistry-client</li>
</ul>При развертывании Customizer Lite HA, интервал, на котором<varname>appregistry-service</varname>узлы проверяют и синхронизируют свой кэш данных настройки, который можно\ nмодифицировать, изменив значение этого параметра (указывается в миллисекундах, по умолчанию = 30 секунд):<varname>APPREGISTRY_SERVICE_CACHE_CHECK</varname>=30000</p>
</info>
</step>
<step>
<cmd><b>ПРИМЕЧАНИЕ: (только для Customizer Lite HA)</b>Отредактируйте<filepath>scripts/docker-compose.yml</filepath>в файле и в<varname>mw-proxy</varname>раздел среды добавьте следующую строку, чтобы обеспечить
что<varname>mw-proxy</varname>сервис получает доступ к<varname>appregistry-service</varname>через\ nбалансировщик нагрузки, используя этот URL:<varname>APPREGISTRY_SERVICE_PROXY: ‘http://${NGINX_URL}’
</varname></cmd>
<info>
<p>Раздел среды должен быть похож на
это:<codeblock>environment:
      USE_SSL: 'true'
      MW_REVERSE_PROXY: '${NGINX_URL}'
      CUSTOMIZER_INTERSERVICE_HOST: '${CONNECTIONS_URL}'
      CUSTOMIZER_INTERSERVICE_PORT: '443'
      IS_PRIVATE_CLOUD: 'true'
      REDIS_INSTALLED: 'false'
      LOCAL_DIRECTORY: '/mnt'
      ROARR_LOG: '${MW_PROXY_LOGGING_ENABLED}'
      APPREGISTRY_SERVICE_PROXY: 'http://${NGINX_URL}'
</codeblock></p>
</info>
</step>
<step>
<cmd>Предполагая, что все предварительные условия на месте и соединения настроены, конфигуратор можно\ n запустить с помощью команды "docker-compose up" или запустить сценарий "update-all-services.sh".\ nОн вернет командную строку, первый выведет журналы на терминал.
"Docker-compose up" должен быть запущен из каталога сценариев. Этот шаг повторяется на каждом\ nдокерном узле, чтобы запустить службы на каждом из них.</cmd>
</step>
</steps>
</taskbody>
</task><?tm 1535390562687 3 Linux||HCL Connections ?>
